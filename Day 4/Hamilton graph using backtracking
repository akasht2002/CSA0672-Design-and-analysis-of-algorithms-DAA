#include <stdio.h>
#define MAX 20

int n;
int adj[MAX][MAX];
int x[MAX];

int is_safe(int v, int pos) {
  int i;
  for (i = 0; i < n; i++)
    if (adj[v][i] && x[i] == pos)
      return 0;
  return 1;
}

int hamiltonian_cycle(int pos) {
  int v;
  if (pos == n) {
    if (adj[x[pos - 1]][x[0]])
      return 1;
    else
      return 0;
  }
  for (v = 0; v < n; v++) {
    if (is_safe(v, pos)) {
      x[pos] = v;
      if (hamiltonian_cycle(pos + 1))
        return 1;
      x[pos] = -1;
    }
  }
  return 0;
}

int main() {
  int i, j;
  printf("Enter number of vertices: ");
  scanf("%d", &n);
  printf("Enter adjacency matrix:\n");
  for (i = 0; i < n; i++)
    for (j = 0; j < n; j++)
      scanf("%d", &adj[i][j]);
  for (i = 0; i < n; i++)
    x[i] = -1;
  x[0] = 0;
  if (hamiltonian_cycle(1) == 0)
    printf("\nSolution does not exist\n");
  else {
    printf("\nSolution exists:\n");
    for (i = 0; i < n; i++)
      printf("%d ", x[i]);
    printf("%d", x[0]);
  }
  return 0;
}
